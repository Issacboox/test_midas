{"mappings":"AAAA,SAAS,gBAAgB,OAAiB;IACtC,MAAM,kBAAkB,oBAAoB;IAC5C,MAAM,gBAAgB,QAAQ,GAAG,CAAC,CAAA,SAAU,OAAO,OAAO,CAAC,iBAAiB,IAAI,IAAI;IACpF,cAAc,IAAI,CAAC;IACnB,OAAO;AACX;AAEA,SAAS,oBAAoB,OAAiB;IAC1C,MAAM,QAAQ,QAAQ,GAAG,CAAC,CAAA,SAAU,OAAO,WAAW,GAAG,KAAK,CAAC;IAC/D,MAAM,YAAY,KAAK,GAAG,IAAI,MAAM,GAAG,CAAC,CAAA,QAAS,MAAM,MAAM;IAE7D,IAAI,kBAAkB;IACtB,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,IAAK;QAChC,MAAM,SAAS,KAAK,CAAC,EAAE,CAAC,EAAE;QAC1B,IAAI,MAAM,KAAK,CAAC,CAAA,QAAS,KAAK,CAAC,EAAE,KAAK,SAClC,mBAAmB,SAAS;aAE5B;IAER;IAEA,OAAO,gBAAgB,IAAI;AAC/B;AAEA,aAAa;AACb,QAAQ,GAAG,CAAC,gBAAgB;IAAC;IAAY;IAAc;CAAY,IAAI,qCAAqC;AAC5G,QAAQ,GAAG,CAAC,gBAAgB;IAAC;IAAY;IAAc;CAAa,IAAI,iCAAiC","sources":["src/q2.ts"],"sourcesContent":["function getQuestionPart(phrases: string[]): string[] {\r\n    const commonSubstring = findCommonSubstring(phrases);\r\n    const questionParts = phrases.map(phrase => phrase.replace(commonSubstring, '').trim());\r\n    questionParts.push(commonSubstring);\r\n    return questionParts;\r\n}\r\n\r\nfunction findCommonSubstring(phrases: string[]): string {\r\n    const words = phrases.map(phrase => phrase.toLowerCase().split(' '));\r\n    const minLength = Math.min(...words.map(words => words.length));\r\n\r\n    let commonSubstring = '';\r\n    for (let i = 0; i < minLength; i++) {\r\n        const substr = words[0][i];\r\n        if (words.every(words => words[i] === substr)) {\r\n            commonSubstring += substr + ' ';\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return commonSubstring.trim();\r\n}\r\n\r\n// Test cases\r\nconsole.log(getQuestionPart([\"BATHROOM\", \"BATH SALTS\", \"BLOODBATH\"])); // Output: [\"ROOM\", \"SALTS\", \"BLOOD\"]\r\nconsole.log(getQuestionPart([\"BEFRIEND\", \"GIRLFRIEND\", \"FRIENDSHIP\"])); // Output: [\"BE\", \"GIRL\", \"SHIP\"]\r\n"],"names":[],"version":3,"file":"index.cb414758.js.map","sourceRoot":"/__parcel_source_root/"}